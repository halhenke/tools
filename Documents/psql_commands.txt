* MYSQL, PSQL EQUIVALENTS

mysql: SHOW TABLES
postgresql: \d
postgresql: SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';

mysql: SHOW DATABASES
postgresql: \l
postgresql: SELECT datname FROM pg_database;

mysql: SHOW COLUMNS
postgresql: \d table
postgresql: SELECT column_name FROM information_schema.columns WHERE table_name ='table';

mysql: DESCRIBE TABLE
postgresql: \d+ table
postgresql: SELECT column_name FROM information_schema.columns WHERE table_name ='table';


* MOST USEFUL METADATA

\dn
All tablespaces
\db
All databases
\l


* SYSTEM CATALOGS - psql/postgres admin type commands

For info on the relation between system catalog commands and information_schema see:
http://dba.stackexchange.com/questions/5509/is-the-mapping-between-postgresql-system-tables-and-information-schema-views-doc

"In addition to public and user-created schemas, each database contains a pg_catalog schema, which contains the system tables and all the built-in data types, functions, and operators"

select * from pg_shadow;


* INFORMATION_SCHEMA

- So what can you find in the INFORMATION_SCHEMA?

schemata—Lists the schemas (in the current database) that are owned by you
tables—Lists all tables in the current database (actually, you only see those tables that you have the right to access in some way)
columns—Lists all columns in all tables that you have the right to access
views—Lists all of the views you have access to in the current database
table_privileges—Shows the privileges you hold (or that you granted) for each accessible object in the current database
domains—Lists all of the domains defined in the current database
check_constraints—Lists all of the CHECK constraints defined for the accessible tables (or domains) in the current database

This tells you about the tables in information_schema:
\dt information_schema.*
or:
\dt information_schema.*
This will give you the "views" in information_schema:
\dv information_schema

SELECT table_schema, table_name, table_type FROM information_schema.tables;

or to get all tables in the information_schema:
SELECT * FROM information_schema.tables;
where table_schema = 'information_schema';


* LIST OF PSQL COMMANDS - "copied stright from "psql   \?")

General
  \copyright             show PostgreSQL usage and distribution terms
  \g [FILE] or ;         execute query (and send results to file or |pipe)
  \h [NAME]              help on syntax of SQL commands, * for all commands
  \q                     quit psql

Query Buffer
  \e [FILE] [LINE]       edit the query buffer (or file) with external editor
  \ef [FUNCNAME [LINE]]  edit function definition with external editor
  \p                     show the contents of the query buffer
  \r                     reset (clear) the query buffer
  \s [FILE]              display history or save it to file
  \w FILE                write query buffer to file

Input/Output
  \copy ...              perform SQL COPY with data stream to the client host
  \echo [STRING]         write string to standard output
  \i FILE                execute commands from file
  \o [FILE]              send all query results to file or |pipe
  \qecho [STRING]        write string to query output stream (see \o)

Informational
  (options: S = show system objects, + = additional detail)
  \d[S+]                 list tables, views, and sequences
  \d[S+]  NAME           describe table, view, sequence, or index
  \da[S]  [PATTERN]      list aggregates
  \db[+]  [PATTERN]      list tablespaces
  \dc[S]  [PATTERN]      list conversions
  \dC     [PATTERN]      list casts
  \dd[S]  [PATTERN]      show comments on objects
  \ddp    [PATTERN]      list default privileges
  \dD[S]  [PATTERN]      list domains
  \det[+] [PATTERN]      list foreign tables
  \des[+] [PATTERN]      list foreign servers
  \deu[+] [PATTERN]      list user mappings
  \dew[+] [PATTERN]      list foreign-data wrappers
  \df[antw][S+] [PATRN]  list [only agg/normal/trigger/window] functions
  \dF[+]  [PATTERN]      list text search configurations
  \dFd[+] [PATTERN]      list text search dictionaries
  \dFp[+] [PATTERN]      list text search parsers
  \dFt[+] [PATTERN]      list text search templates
  \dg[+]  [PATTERN]      list roles
  \di[S+] [PATTERN]      list indexes
  \dl					list large objects, same as \lo_list
  \dL[S+] [PATTERN]      list procedural languages
  \dn[S+] [PATTERN]      list schemas
  \do[S]  [PATTERN]      list operators
  \dO[S+] [PATTERN]      list collations
  \dp     [PATTERN]      list table, view, and sequence access privileges
  \drds [PATRN1 [PATRN2]] list per-database role settings
  \ds[S+] [PATTERN]      list sequences
  \dt[S+] [PATTERN]      list tables
  \dT[S+] [PATTERN]      list data types
  \du[+]  [PATTERN]      list roles
  \dv[S+] [PATTERN]      list views
  \dE[S+] [PATTERN]      list foreign tables
  \dx[+]  [PATTERN]      list extensions
  \l[+]                  list all databases
  \sf[+] FUNCNAME        show a function's definition
  \z      [PATTERN]      same as \dp

Formatting
  \a                     toggle between unaligned and aligned output mode
  \C [STRING]            set table title, or unset if none
  \f [STRING]            show or set field separator for unaligned query output
  \H                     toggle HTML output mode (currently off)
  \pset NAME [VALUE]     set table output option
                         (NAME := {format|border|expanded|fieldsep|footer|null|
                         numericlocale|recordsep|tuples_only|title|tableattr|pager})
  \t [on|off]            show only rows (currently on)
  \T [STRING]            set HTML <table> tag attributes, or unset if none
  \x [on|off]            toggle expanded output (currently off)

Connection
  \c[onnect] [DBNAME|- USER|- HOST|- PORT|-]
                         connect to new database (currently "postgres")
  \encoding [ENCODING]   show or set client encoding
  \password [USERNAME]   securely change the password for a user
  \conninfo              display information about current connection

Operating System
  \cd [DIR]              change the current working directory
  \timing [on|off]       toggle timing of commands (currently off)
  \! [COMMAND]           execute command in shell or start interactive shell

Variables
  \prompt [TEXT] NAME    prompt user to set internal variable
  \set [NAME [VALUE]]    set internal variable, or list all if no parameters
  \unset NAME            unset (delete) internal variable

Large Objects
  \lo_export LOBOID FILE
  \lo_import FILE [COMMENT]
  \lo_list
  \lo_unlink LOBOID      large object operations


* EXAMPLE SYNTAX & THINGS TO LOOK OUT FOR
select * from pg_views
where viewname='tables';

** Postgres doesn't seem to like the keyword 'AS' when using aliases

So you can do:

SELECT * FROM node n JOIN node_revisions nr ON (n.nid = nr.nid) WHERE type = 'admin_note';

or:

SELECT * FROM node JOIN node_revisions ON (node.nid = node_revisions.nid) WHERE type = 'admin_note';

but not:

SELECT * FROM node AS n JOIN node_revisions AS nr ON (node.nid = node_revisions.nid) WHERE type = 'admin_note';

:-O


* COOL QUERIES

Get all columns except one or two

SELECT 'SELECT ' || array_to_string(ARRAY(SELECT 'o' || '.' || c.column_name
        FROM information_schema.columns As c
            WHERE table_name = 'node_type' 
            AND  c.column_name NOT IN('description')
    ), ',') || ' FROM node_type As o' As sqlstmt;

Use regular expression:

SELECT * FROM variable
WHERE NAME ~ 'formblock_expose_.*';
